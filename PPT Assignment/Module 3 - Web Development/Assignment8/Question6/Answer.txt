Q.6 Explain react component life cycle.
Ans- In React, the component lifecycle refers to the different phases or stages a component goes through from its creation to its removal from the DOM. Each phase of the lifecycle provides specific methods that can be overridden to perform actions at different points in a component's existence.

React 16.3 introduced a new lifecycle method structure known as the "React Fiber" architecture, which includes both the old lifecycle methods (pre-React 16.3) and the new ones. Here is an overview of the different phases in the component lifecycle:

1. Mounting Phase:
   - `constructor()`: This is the first method called when an instance of a component is created. It is used for initializing state and binding event handlers.
   - `static getDerivedStateFromProps()`: This method is invoked before rendering and allows a component to update its state based on changes in props.
   - `render()`: This method is responsible for returning the JSX that represents the component's UI.
   - `componentDidMount()`: This method is called after the component is mounted in the DOM. It is often used for performing side effects such as data fetching or setting up event listeners.

2. Updating Phase:
   - `static getDerivedStateFromProps()`: This method is also invoked during the updating phase, similar to the mounting phase, and allows a component to update its state based on changes in props.
   - `shouldComponentUpdate()`: This method determines whether the component should re-render or not. It can be used to optimize performance by preventing unnecessary re-renders.
   - `render()`: The render method is called again to update the component's UI based on updated props or state.
   - `componentDidUpdate()`: This method is called after the component has been updated and re-rendered. It is often used for performing side effects such as updating the DOM or fetching new data based on changes.

3. Unmounting Phase:
   - `componentWillUnmount()`: This method is called when a component is about to be removed from the DOM. It is used for cleaning up resources, such as canceling timers or removing event listeners.

4. Error Handling Phase:
   - `static getDerivedStateFromError()`: This method is invoked when an error occurs during rendering. It allows a component to update its state to display an alternative UI in case of an error.
   - `componentDidCatch()`: This method is called after an error has been thrown by a child component. It is used for logging the error or displaying a fallback UI.

It's important to note that some of the older lifecycle methods, such as `componentWillMount`, `componentWillReceiveProps`, and `componentWillUpdate`, are now considered legacy and have been replaced by the new lifecycle methods mentioned above. It is recommended to use the new methods for better compatibility and to leverage the latest React features.

Understanding the component lifecycle is crucial for managing state, performing side effects, and handling updates effectively in React applications. However, it's worth mentioning that with the introduction of React Hooks, the component lifecycle is becoming less relevant as hooks provide a more straightforward and concise way to handle state and side effects.